from requests import post
from urllib.parse import unquote
from colorama import Fore
from hashlib import md5
from datetime import datetime, timedelta
from threading import Thread, Lock
from typing import Literal
from random import randint
from os import system as sys
from platform import system as s_name
from time import sleep
from itertools import cycle

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker
from Core.Tools.HPV_User_Agent import HPV_User_Agent

from Core.Config.HPV_Config import *







class HPV_Gamee:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –ø—Ä–∏ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ`
    
    [2] - `–°–±–æ—Ä WP –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞–π–Ω–∏–Ω–≥–µ`
    
    [3] - `–ü–æ–ø—ã—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ WP`
    
    [4] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–∏–∏ —Å–ø–∏–Ω–æ–≤`
    
    [5] - `–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤`
    
    [6] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–∏–∏ –∏–≥—Ä`
    
    [7] - `–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä`
    
    [8] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 30 –¥–æ 60 –º–∏–Ω—É—Ç`
    
    [9] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 30-60 –º–∏–Ω—É—Ç`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict = None) -> None:
        self.Name = Name                         # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.URL = self.URL_Clean(URL)           # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Proxy = Proxy                       # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()               # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent
        self.Domain = 'https://api.gamee.com/'   # –î–æ–º–µ–Ω –∏–≥—Ä—ã
        INFO = self.Authentication()
        self.Token = INFO['Token']               # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
        self.Games = str(INFO['Games'] + 1)      # –ö–æ–ª-–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä



    def URL_Clean(self, URL: str) -> str:
        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

        try:
            return unquote(URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])
        except:
            return ''



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Authentication(self) -> dict:
        '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': 'a5658ae5-54e4-447c-a8cc-d1859be596ea'}
        Data = '{"jsonrpc":"2.0","id":"user.authentication.loginUsingTelegram","method":"user.authentication.loginUsingTelegram","params":{"initData":"' + self.URL + '"}}'

        try:
            HPV = post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']

            Token = HPV['tokens']['authenticate'] # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
            Games = HPV['user']['gamee']['gameplays'] # –ö–æ–ª-–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä

            self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            return {'Token': Token, 'Games': Games}
        except:
            self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
            return {'Token': '', 'Games': 0}



    def ReAuthentication(self) -> None:
        '''–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        INFO = self.Authentication()
        self.Token = INFO['Token']               # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
        self.Games = str(INFO['Games'] + 1)      # –ö–æ–ª-–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä



    def Get_Info(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': '927fcdde-8b83-4e37-9862-24e9611fb9c2'}
        Data = '{"jsonrpc":"2.0","id":"miningEvent.getAll","method":"miningEvent.getAll","params":{"pagination":{"offset":0,"limit":10}}}'

        try:
            HPV = post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()

            USER_INFO = HPV['user'] # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –±–∏–ª–µ—Ç–æ–≤ –∏ –¥–æ–ª–ª–∞—Ä–æ–≤
            Tickets = USER_INFO['tickets']['count'] # –ë–∞–ª–∞–Ω—Å –±–∏–ª–µ—Ç–æ–≤
            WP = '' # –ë–∞–ª–∞–Ω—Å WP
            COIN = '' # –ë–∞–ª–∞–Ω—Å COIN

            try:Dollars = USER_INFO['money']['usdCents'] / 100 # –ë–∞–ª–∞–Ω—Å –¥–æ–ª–ª–∞—Ä–æ–≤
            except:Dollars = USER_INFO['money']['usdCents']

            for Token in USER_INFO['assets']:
                if Token['currency']['ticker'] == 'WP':
                    WP = f"{Token['amountMicroToken'] / 1_000_000:,.2f}"
                elif Token['currency']['ticker'] == 'COIN':
                    COIN = f"{Token['amountMicroToken'] / 1_000_000:,.0f}"

            WP_INFO = HPV['result']['miningEvents'] # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–π–Ω–∏–Ω–≥–µ WP
            for WP_Mining in WP_INFO:
                try:Mining_Over = WP_Mining['miningUser']['miningSessionEnded'] # –ó–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ü–∏–∫–ª –º–∞–π–Ω–∏–Ω–≥–∞ [True –∏–ª–∏ False]
                except:pass

            return {'Tickets': f'{Tickets:,}', 'WP': WP, 'COIN': COIN, 'Dollars': Dollars, 'Mining_Over': Mining_Over}
        except:
            return {'Tickets': None, 'WP': None, 'COIN': None, 'Dollars': None, 'Mining_Over': None}



    def Get_Info_Spin(self) -> int:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–∏–∏ —Å–ø–∏–Ω–æ–≤'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': 'a5658ae5-54e4-447c-a8cc-d1859be596ea'}
        Data = '{"jsonrpc":"2.0","id":"dailyReward.getPrizes","method":"dailyReward.getPrizes","params":{}}'

        try:
            HPV = post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']['dailyReward']

            Spins = HPV['spinsCountAvailable'] # –û–±—ã—á–Ω—ã–µ —Å–ø–∏–Ω—ã
            Gold_Spins = HPV['wheelOfCashSpinsCountAvailable'] # –°–ø–∏–Ω—ã –∑–∞ –ø—Ä–∏–∑—ã –≤ $

            return Spins + Gold_Spins
        except:
            return 0



    def Claim_WP(self) -> bool:
        '''–°–±–æ—Ä WP'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': '927fcdde-8b83-4e37-9862-24e9611fb9c2'}
        Data1 = '{"jsonrpc":"2.0","id":"miningEvent.claim","method":"miningEvent.claim","params":{"miningEventId":26}}'
        Data2 = '{"jsonrpc":"2.0","id":"miningEvent.startSession","method":"miningEvent.startSession","params":{"miningEventId":26}}'

        try:
            post(self.Domain, headers=Headers, data=Data1, proxies=self.Proxy).json()['result'] # Claim
            post(self.Domain, headers=Headers, data=Data2, proxies=self.Proxy).json()['result'] # Start Session
            self.Logging('Success', self.Name, 'üü¢', '–ú–æ–Ω–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã!')
            return True
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ú–æ–Ω–µ—Ç—ã –Ω–µ —Å–æ–±—Ä–∞–Ω—ã!')
            return False



    def WP_Mining_Update(self) -> bool:
        '''–ê–ø–≥—Ä–µ–π–¥ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ WP'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': '927fcdde-8b83-4e37-9862-24e9611fb9c2'}
        Data = '{"jsonrpc":"2.0","id":"miningEvent.upgrade","method":"miningEvent.upgrade","params":{"miningEventId":26,"upgrade":"storage"}}'

        try:
            post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']
            return True
        except:
            return False



    def Spin(self) -> None:
        '''–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': '927fcdde-8b83-4e37-9862-24e9611fb9c2'}
        Data = '[{"jsonrpc":"2.0","id":"dailyReward.claimPrize","method":"dailyReward.claimPrize","params":{}},{"jsonrpc":"2.0","id":"dailyReward.getPrizes","method":"dailyReward.getPrizes","params":{}}]'

        try:
            HPV = post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()[0]['result']['reward']

            Prize = ''
            if HPV['type'] == 'money' or HPV['type'] == 'wheelOfCash':
                Prize = f'{HPV["usdCents"] / 100:,.2f}$'
            else:
                Prize = f'{HPV["tickets"]} –±–∏–ª–µ—Ç–æ–≤'

            self.Logging('Success', self.Name, 'üü¢', f'–í—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ: {Prize}')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–í—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ!')



    def Get_Plays(self) -> int:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': '927fcdde-8b83-4e37-9862-24e9611fb9c2'}
        Data = '{"jsonrpc":"2.0","id":"telegram.getGameAndLives","method":"telegram.getGameAndLives","params":{"gameId":null}}'

        try:
            return int(post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']['lives']['numberOfLives'] / 30)
        except:
            return 0



    def Play(self) -> None:
        '''–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –º–∞—à–∏–Ω–∫—É'''

        def Checksum_Generation(WP, COIN):
            gameStateData = '{"usedLives":30,"reward":{"WP":'+WP+',"COIN":'+COIN+'}}'
            return md5(f'0:32::{gameStateData}:crmjbjm3lczhlgnek9uaxz2l9svlfjw14npauhen'.encode()).hexdigest()

        WP, COIN = str(randint(WPs[0], WPs[1])), str(randint(COINs[0], COINs[1]))
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': '927fcdde-8b83-4e37-9862-24e9611fb9c2'}
        Data = '{"jsonrpc":"2.0","id":"game.saveTelegramMainGameplay","method":"game.saveTelegramMainGameplay","params":{"gameplayData":{"gameId":294,"score":0,"playTime":32,"releaseNumber":4,"createdTime":"2024-07-28T16:05:36+05:00","metadata":{"gameplayId":' + self.Games + '},"checksum":"' + Checksum_Generation(WP, COIN) + '","gameStateData":"{\\"usedLives\\":30,\\"reward\\":{\\"WP\\":'+WP+',\\"COIN\\":'+COIN+'}}","replayData":"AgAAABIAHnkD5cwAbgBvBQAe","replayVariant":null,"replayDataChecksum":null}}}'

        try:
            HPV = post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']['rewardVirtualTokens']

            WP = ''
            COIN = ''

            for Token in HPV:
                if Token['currency']['ticker'] == 'WP':
                    WP = int(Token['amountMicroToken'] / 1_000_000)
                if Token['currency']['ticker'] == 'COIN':
                    COIN = int(Token['amountMicroToken'] / 1_000_000)

            self.Logging('Success', self.Name, 'üü¢', f'–ò–≥—Ä–∞ —Å—ã–≥—Ä–∞–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ: +{WP} WP –∏ +{COIN} COIN')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ò–≥—Ä–∞ –Ω–µ —Å—ã–≥—Ä–∞–Ω–∞!')



    def Run(self) -> None:
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                if self.Token: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    INFO = self.Get_Info()


                    Tickets = INFO['Tickets'] # –ë–∞–ª–∞–Ω—Å –±–∏–ª–µ—Ç–æ–≤
                    WP = INFO['WP'] # –ë–∞–ª–∞–Ω—Å WP
                    COIN = INFO['COIN'] # –ë–∞–ª–∞–Ω—Å COIN
                    Dollars = INFO['Dollars'] # –ë–∞–ª–∞–Ω—Å –¥–æ–ª–ª–∞—Ä–æ–≤
                    Mining_Over = INFO['Mining_Over'] # –ó–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ü–∏–∫–ª –º–∞–π–Ω–∏–Ω–≥–∞ [True –∏–ª–∏ False]


                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Dollars}$, {Tickets} –±–∏–ª–µ—Ç–æ–≤, {WP} WP –∏ {COIN} COIN')


                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ WP, –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –µ–≥–æ –∑–∞–ø—É—Å–∫
                    try: # –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        if Mining_Over:
                            if self.Claim_WP():
                                INFO = self.Get_Info()
                                Tickets, WP, COIN, Dollars = INFO['Tickets'], INFO['WP'], INFO['COIN'], INFO['Dollars']
                                self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Dollars}$, {Tickets} –±–∏–ª–µ—Ç–æ–≤, {WP} WP –∏ {COIN} COIN')
                                sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                    except: # –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        self.Claim_WP() # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ü–æ–ø—ã—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ WP
                    if UPDATE:
                        if self.WP_Mining_Update():
                            self.Logging('Success', self.Name, 'üü¢', '–ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–∏–Ω–≥–∞ —É—Å–ø–µ—à–µ–Ω!')
                            INFO = self.Get_Info()
                            Tickets, WP, COIN, Dollars = INFO['Tickets'], INFO['WP'], INFO['COIN'], INFO['Dollars']
                            self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Dollars}$, {Tickets} –±–∏–ª–µ—Ç–æ–≤, {WP} WP –∏ {COIN} COIN')
                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                    Get_Spins = self.Get_Info_Spin()
                    if Get_Spins > 0:
                        self.Logging('Success', self.Name, 'üéÆ', f'–°–ø–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {Get_Spins}!')
                        for _ in range(Get_Spins):
                            self.Spin()
                            sleep(randint(12, 23))

                            INFO = self.Get_Info()
                            Tickets, WP, COIN, Dollars = INFO['Tickets'], INFO['WP'], INFO['COIN'], INFO['Dollars']
                            self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Dollars}$, {Tickets} –±–∏–ª–µ—Ç–æ–≤, {WP} WP –∏ {COIN} COIN')


                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                    Get_Plays = self.Get_Plays()
                    if Get_Plays > 0:
                        self.Logging('Success', self.Name, 'üéÆ', f'–ò–≥—Ä –¥–æ—Å—Ç—É–ø–Ω–æ: {Get_Spins}!')
                        for _ in range(Get_Spins):
                            self.Play()
                            sleep(randint(12, 23))

                            INFO = self.Get_Info()
                            Tickets, WP, COIN, Dollars = INFO['Tickets'], INFO['WP'], INFO['COIN'], INFO['Dollars']
                            self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Dollars}$, {Tickets} –±–∏–ª–µ—Ç–æ–≤, {WP} WP –∏ {COIN} COIN')


                    Waiting = randint(1_800, 3_600) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging('Warning', self.Name, '‚è≥', f'–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏–Ω–æ–≤: {Waiting_STR}!')

                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 30 –¥–æ 60 –º–∏–Ω—É—Ç
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            except:
                pass







if __name__ == '__main__':
    sys('cls') if s_name() == 'Windows' else sys('clear')

    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()

    def Start_Thread(Account, URL, Proxy = None):
        Gamee = HPV_Gamee(Account, URL, Proxy)
        Gamee.Run()

    if Proxy:
        DIVIDER = Fore.BLACK + ' | '
        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'
        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)
        sleep(5)

    try:
        for Account, URL in HPV_Get_Accounts().items():
            if Proxy:
                Proxy = cycle(Proxy)
                Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
            else:
                Thread(target=Start_Thread, args=(Account, URL,)).start()
    except:
        print(Fore.RED + '\n\t–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è `HPV_Account.json`, —Å—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')


