from requests import post, get
from urllib.parse import unquote
from colorama import Fore
from datetime import datetime, timedelta
from threading import Thread, Lock
from typing import Literal
from random import randint
from os import system as sys
from platform import system as s_name
from time import sleep
from itertools import cycle

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker
from Core.Tools.HPV_User_Agent import HPV_User_Agent

from Core.Config.HPV_Config import *







class HPV_Gamee:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –º–∞–π–Ω–∏–Ω–≥ –∏–≤–µ–Ω—Ç–µ`
    
    [2] - `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –ø—Ä–∏ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ`
    
    [3] - `–°–±–æ—Ä WP –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞–π–Ω–∏–Ω–≥–µ`
    
    [4] - `–ü–æ–ø—ã—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ WP`
    
    [5] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–∏–∏ —Å–ø–∏–Ω–æ–≤`
    
    [6] - `–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤`
    
    [7] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 30 –¥–æ 60 –º–∏–Ω—É—Ç`
    
    [8] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 30-60 –º–∏–Ω—É—Ç`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict = None) -> None:
        self.Name = Name                         # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.URL = self.URL_Clean(URL)           # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Proxy = Proxy                       # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()               # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent
        self.Domain = 'https://api.gamee.com/'   # –î–æ–º–µ–Ω –∏–≥—Ä—ã
        self.Token = self.Authentication()       # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞



    def URL_Clean(self, URL: str) -> str:
        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

        try:
            return unquote(URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])
        except:
            return ''



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Authentication(self) -> str:
        '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': 'a5658ae5-54e4-447c-a8cc-d1859be596ea'}
        Data = '{"jsonrpc":"2.0","id":"user.authentication.loginUsingTelegram","method":"user.authentication.loginUsingTelegram","params":{"initData":"' + self.URL + '"}}'

        try:
            Token = post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']['tokens']['authenticate']
            self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            return Token
        except:
            self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
            return ''



    def ReAuthentication(self) -> None:
        '''–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        self.Token = self.Authentication()



    def Get_EventID(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –º–∞–π–Ω–∏–Ω–≥ –∏–≤–µ–Ω—Ç–µ'''

        URL = 'https://raw.githubusercontent.com/A-KTO-Tbl/Gamee/main/Core/Config/HPV_Events_Info.json'

        try:
            HPV = get(URL).json()

            ID = HPV['id'] # ID –∏–≤–µ–Ω—Ç–∞
            PASS = HPV['pass'] # –ü–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–≤–µ–Ω—Ç–∞

            return {'Status': True, 'ID': ID, 'PASS': PASS}
        except:
            return {'Status': False}



    def Get_Info(self, ID: str) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': 'a5658ae5-54e4-447c-a8cc-d1859be596ea'}
        Data = '{"jsonrpc":"2.0","id":"miningEvent.get","method":"miningEvent.get","params":{"miningEventId":' + ID + '}}'

        try:
            HPV = post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()


            USER_INFO = HPV['user'] # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –±–∏–ª–µ—Ç–æ–≤ –∏ –¥–æ–ª–ª–∞—Ä–æ–≤
            Tickets = USER_INFO['tickets']['count'] # –ë–∞–ª–∞–Ω—Å –±–∏–ª–µ—Ç–æ–≤
            try:
                Dollars = USER_INFO['money']['usdCents'] / 100 # –ë–∞–ª–∞–Ω—Å –¥–æ–ª–ª–∞—Ä–æ–≤
            except:
                Dollars = USER_INFO['money']['usdCents']


            WP_INFO = HPV['result']['miningEvent']['miningUser'] # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–π–Ω–∏–Ω–≥–µ WP
            if WP_INFO:
                Improvement_Level = WP_INFO['countOfStorageImprovements'] + 1 # –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
                Max_Storage = f'{WP_INFO["currentSessionMicroToken"] / 1_000_000:,.0f}' # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥ –º–∞–π–º–∏–Ω–≥–∞
                Received = f'{WP_INFO["currentSessionMicroTokenMined"] / 1_000_000:,.2f}' # –ù–∞–º–∞–π–Ω–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
                Mining_Speed = f'{WP_INFO["currentSpeedMicroToken"] / 1_000_000:,.2f}' # –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
                Mining_Over = WP_INFO['miningSessionEnded'] # –ó–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ü–∏–∫–ª –º–∞–π–Ω–∏–Ω–≥–∞ [True –∏–ª–∏ False]
                try:
                    WPs = f'{WP_INFO["cumulativeMicroTokenMined"] / 1_000_000:,.2f}' # –ë–∞–ª–∞–Ω—Å WP
                except:
                    WPs = f'{WP_INFO["cumulativeMicroTokenMined"]:,.2f}'

                return {'Improvement_Level': Improvement_Level, 'Max_Storage': Max_Storage, 'Received': Received, 'Mining_Speed': Mining_Speed, 'Mining_Over': Mining_Over, 'WPs': WPs, 'Tickets': f'{Tickets:,}', 'Dollars': Dollars, 'WP_INFO': True}

            return {'Tickets': f'{Tickets:,}', 'Dollars': Dollars, 'WP_INFO': False}
        except:
            return None



    def Get_Info_Spin(self) -> int:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–∏–∏ —Å–ø–∏–Ω–æ–≤'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': 'a5658ae5-54e4-447c-a8cc-d1859be596ea'}
        Data = '{"jsonrpc":"2.0","id":"dailyReward.getPrizes","method":"dailyReward.getPrizes","params":{}}'

        try:
            return post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']['dailyReward']['spinsCountAvailable']
        except:
            return None



    def Claim_WP(self, ID: str) -> bool:
        '''–°–±–æ—Ä WP'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': '7a971f19-6698-482e-8083-63882c87ee36'}
        Data = '{"jsonrpc":"2.0","id":"miningEvent.startSession","method":"miningEvent.startSession","params":{"miningEventId":' + ID + '}}'

        try:
            post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']
            self.Logging('Success', self.Name, 'üü¢', '–ú–æ–Ω–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã!')
            return True
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ú–æ–Ω–µ—Ç—ã –Ω–µ —Å–æ–±—Ä–∞–Ω—ã!')
            return False



    def WP_Mining_Update(self, ID: str) -> bool:
        '''–ê–ø–≥—Ä–µ–π–¥ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ WP'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': 'a5658ae5-54e4-447c-a8cc-d1859be596ea'}
        Data = '{"jsonrpc":"2.0","id":"miningEvent.upgrade","method":"miningEvent.upgrade","params":{"miningEventId":' + ID + ',"upgrade":"storage"}}'

        try:
            post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']
            return True
        except:
            return False



    def Spin(self) -> None:
        '''–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': 'a5658ae5-54e4-447c-a8cc-d1859be596ea'}
        Data = '[{"jsonrpc":"2.0","id":"dailyReward.claimPrize","method":"dailyReward.claimPrize","params":{}},{"jsonrpc":"2.0","id":"dailyReward.getPrizes","method":"dailyReward.getPrizes","params":{}}]'

        try:
            HPV = post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()[0]['result']['reward']

            Prize = ''
            if HPV['type'] == 'money':
                Prize = f'{HPV["usdCents"] / 100:,.2f}$'
            else:
                Prize = f'{HPV["tickets"]} –±–∏–ª–µ—Ç–æ–≤'

            self.Logging('Success', self.Name, 'üü¢', f'–í—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ: {Prize}')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–í—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ!')



    def Unblock(self, ID: str, PASS: str) -> bool:
        '''–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞—Ä–º–∞ WP'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'client-language': 'en', 'content-type': 'text/plain;charset=UTF-8', 'origin': 'https://prizes.gamee.com', 'priority': 'u=1, i', 'referer': 'https://prizes.gamee.com/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA, 'x-install-uuid': '7a971f19-6698-482e-8083-63882c87ee36'}
        Data = '{"jsonrpc":"2.0","id":"miningEvent.startSession","method":"miningEvent.startSession","params":{"miningEventId":' + ID + ',"code":"' + PASS + '"}}'

        try:
            post(self.Domain, headers=Headers, data=Data, proxies=self.Proxy).json()['result']
            return True
        except:
            return False



    def Run(self) -> None:
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                if self.Token: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞

                    Event_INFO = self.Get_EventID() # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –º–∞–π–Ω–∏–Ω–≥ –∏–≤–µ–Ω—Ç–µ
                    if Event_INFO['Status']: # –ï—Å–ª–∏ ID –∏ –ø–∞—Ä–æ–ª—å –∏–≤–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã
                        ID, PASS = Event_INFO['ID'], Event_INFO['PASS']
                        INFO = self.Get_Info(ID)

                        if INFO['WP_INFO']: # –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                            self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.Get_Info(ID)["Dollars"]}$, {self.Get_Info(ID)["WPs"]} WP –∏ {self.Get_Info(ID)["Tickets"]} –±–∏–ª–µ—Ç–æ–≤')

                            if INFO['Mining_Over']: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ WP, –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –µ–≥–æ –∑–∞–ø—É—Å–∫
                                if self.Claim_WP(ID):
                                    self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ WP: {self.Get_Info(ID)["Dollars"]}$, {self.Get_Info(ID)["WPs"]} WP –∏ {self.Get_Info(ID)["Tickets"]} –±–∏–ª–µ—Ç–æ–≤')
                                    sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                        else: # –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                            if self.Unblock(ID, PASS): # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è, –≤ —Å–ª—É—á–∞–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                                self.Logging('Success', self.Name, 'üü¢', '–§–∞—Ä–º–∏–Ω–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
                                sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                        if UPDATE: # –ü–æ–ø—ã—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ WP
                            if self.WP_Mining_Update(ID):
                                self.Logging('Success', self.Name, 'üü¢', '–ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–∏–Ω–≥–∞ —É—Å–ø–µ—à–µ–Ω!')
                                sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    else: # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏ –ø–∞—Ä–æ–ª—å –∏–≤–µ–Ω—Ç–∞
                        self.Logging('Warning', self.Name, 'üî¥', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≤–µ–Ω—Ç–µ!')


                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                    Get_Spins = self.Get_Info_Spin()
                    if Get_Spins > 0:
                        self.Logging('Success', self.Name, 'üéÆ', f'–°–ø–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {Get_Spins}!')
                        for _ in range(Get_Spins):
                            self.Spin()
                            sleep(randint(12, 23))

                        INFO = self.Get_Info(ID)
                        self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–≥—Ä: {INFO["Dollars"]}$, {INFO["WPs"]} WP –∏ {INFO["Tickets"]} –±–∏–ª–µ—Ç–æ–≤')


                    Waiting = randint(1_800, 3_600) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging('Warning', self.Name, '‚è≥', f'–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏–Ω–æ–≤: {Waiting_STR}!')

                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 30 –¥–æ 60 –º–∏–Ω—É—Ç
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            except:
                pass







if __name__ == '__main__':
    sys('cls') if s_name() == 'Windows' else sys('clear')

    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()

    def Start_Thread(Account, URL, Proxy = None):
        Gamee = HPV_Gamee(Account, URL, Proxy)
        Gamee.Run()

    if Proxy:
        DIVIDER = Fore.BLACK + ' | '
        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'
        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)
        sleep(5)

    for Account, URL in HPV_Get_Accounts().items():
        if Proxy:
            Proxy = cycle(Proxy)
            Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
        else:
            Thread(target=Start_Thread, args=(Account, URL,)).start()


